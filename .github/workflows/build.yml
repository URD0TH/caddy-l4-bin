name: Build Caddy

on:
  push:
    tags:
      - 'build*'
    branches-ignore:
      - '**'
      
permissions:
  contents: write

env:
  GO_VERSION: '1.24.1'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install curl
        run: |
          sudo apt install -y curl 

      - name: Verificar última versión de Go
        run: |
          LATEST_GO_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n 1 | cut -c 3-)
          echo "LATEST_GO_VERSION=${LATEST_GO_VERSION}" >> $GITHUB_ENV
          if [ "${{ env.GO_VERSION }}" != "${LATEST_GO_VERSION}" ]; then
            echo "⚠️ Advertencia: La versión de Go (${{ env.GO_VERSION }}) no es la más reciente (${LATEST_GO_VERSION})"
          else
            echo "✅ Usando la última versión de Go"
          fi

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create temp directory
        run:  mkdir -p ./temp/xcaddy
                  
      - name: Set Version
        run: echo "VERSION=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Download checksums file
        working-directory: ./temp/xcaddy
        run: |
          # Obtener la URL del último release
          RELEASE_DATA=$(curl -sL https://api.github.com/repos/caddyserver/xcaddy/releases/latest)
          if [ $? -ne 0 ]; then
            echo "Error al obtener datos del release"
            exit 1
          fi
          
          # Extraer URL del archivo checksums
          CHECKSUMS_URL=$(echo "$RELEASE_DATA" | grep -o 'https://.*checksums.txt' | head -n1)
          if [ -z "$CHECKSUMS_URL" ]; then
            echo "No se pudo encontrar la URL del archivo checksums"
            exit 1
          fi
          
          # Descargar archivo checksums
          echo "Descargando checksums desde: $CHECKSUMS_URL"
          HTTP_CODE=$(curl -sL -w "%{http_code}" -o checksums.txt "$CHECKSUMS_URL")
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Error al descargar checksums. Código HTTP: $HTTP_CODE"
            exit 1
          fi
          
          # Verificar que el archivo no esté vacío
          if [ ! -s checksums.txt ]; then
            echo "El archivo checksums está vacío"
            exit 1
          fi
          
          echo "✅ Archivo checksums descargado correctamente"
          ls -la
          echo ""
          echo ""
          echo ""
          echo "Contenido del archivo checksums:"
          cat checksums.txt
          
      - name: Download and verify AMD64 build
        working-directory: ./temp/xcaddy
        run: |
          # Descargar archivo AMD64
          # Obtener datos del release
          RELEASE_DATA=$(curl -s https://api.github.com/repos/caddyserver/xcaddy/releases/latest)
          if [ $? -ne 0 ]; then
            echo "❌ Error (10): Falló la obtención de datos del release"
            exit 10
          fi
          
          # Extraer URL y versión
          URL=$(echo "$RELEASE_DATA" | grep "browser_download_url.*linux_amd64.tar.gz" | cut -d '"' -f 4)
          if [ -z "$URL" ]; then
            echo "❌ Error (11): No se pudo extraer la URL del archivo AMD64"
            exit 11
          fi

          XCADDYV=$(echo "$RELEASE_DATA" | grep '"tag_name"' | cut -d '"' -f 4 | sed 's/^v//')
          if [ -z "$XCADDYV" ]; then
            echo "❌ Error (12): No se pudo extraer la versión de xcaddy"
            exit 12
          fi
          
          echo "XCADDYV=$XCADDYV" >> $GITHUB_ENV
          echo "🔍 URL: $URL"
          echo "📦 Versión: $XCADDYV"

          # Construir nombre del archivo esperado y descargarlo
          FILENAME=$(echo "$URL" | grep -o "xcaddy_.*_linux_amd64.tar.gz")
          echo "📄 Nombre del archivo a buscar: $FILENAME"

          curl -sL -o caddy_amd64.tar.gz "$URL"
          if [ ! -f caddy_amd64.tar.gz ]; then
            echo "❌ Error (13): Falló la descarga del archivo"
            exit 13
          fi

          # Verificar existencia del archivo checksums
          if [ ! -f checksums.txt ]; then
            echo "❌ Error (14): No se encuentra el archivo checksums.txt"
            exit 14
          fi

          # Buscar y verificar checksum
          echo "🔐 Buscando checksum para: $FILENAME"
          EXPECTED_CHECKSUM=$(grep -w "$FILENAME" checksums.txt | cut -d ' ' -f1)
          if [ -z "$EXPECTED_CHECKSUM" ]; then
              echo "❌ Error (15): No se encontró el checksum para ${FILENAME}"
              echo "Contenido actual de checksums.txt:"
              cat checksums.txt
              exit 15
          fi

          echo "🔍 Hash encontrado"
          echo ""

          ACTUAL_CHECKSUM=$(sha512sum caddy_amd64.tar.gz | cut -d ' ' -f1)
          if [ -z "$ACTUAL_CHECKSUM" ]; then
              echo "❌ Error (16): No se pudo calcular el hash del archivo descargado"
              exit 16
          fi
          echo "🧮 Hash calculado"
          echo ""
          
                  
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
              echo "❌ Error (17): La verificación del checksum falló"
              echo "Esperado: $EXPECTED_CHECKSUM"
              echo "Obtenido: $ACTUAL_CHECKSUM"
              exit 17
          else
              echo "✅ Checksum verificado $EXPECTED_CHECKSUM"
              echo ""
          fi

          # Extraer archivo
          tar -xvf caddy_amd64.tar.gz

      - name: compilar xcaddy amd64 layer 4 y cloudflare
        working-directory: ./temp/xcaddy
        run: |
          #compilar xcaddy para amd64 layer 4 y cloudflare
          GOARCH=amd64 GOOS=linux ./xcaddy build --with github.com/caddy-dns/cloudflare --with github.com/mholt/caddy-l4 --output caddy_amd64_v${{ env.VERSION }}
          echo "Caddy compiled successfully"
          # Comprimir en tar.gz
          tar -czf caddy_amd64_v${{ env.VERSION }}.tar.gz caddy_amd64_v${{ env.VERSION }}
          
          # Verificar arquitectura
          file "caddy_amd64_v${{ env.VERSION }}.tar.gz"

          #verificar checksum
          sha512sum caddy_amd64_v${{ env.VERSION }}.tar.gz | cut -d ' ' -f1 > caddy_amd64_v${{ env.VERSION }}.tar.gz.sha512
   

      - name: compilar xcaddy arm64 layer 4 y cloudflare
        working-directory: ./temp/xcaddy
        run: |
          #compilar xcaddy para arm64 layer 4 y cloudflare
          GOARCH=arm64 GOOS=linux ./xcaddy build --with github.com/caddy-dns/cloudflare --with github.com/mholt/caddy-l4 --output caddy_arm64_v${{ env.VERSION }}
          echo "Caddy compiled successfully"
          # Comprimir en tar.gz
          tar -czf caddy_arm64_v${{ env.VERSION }}.tar.gz caddy_arm64_v${{ env.VERSION }}

          # Verificar arquitectura
          file "caddy_arm64_v${{ env.VERSION }}.tar.gz"

          #verificar checksum
          sha512sum caddy_arm64_v${{ env.VERSION }}.tar.gz | cut -d ' ' -f1 > caddy_arm64_v${{ env.VERSION }}.tar.gz.sha512

          CURRENT_PATH=$(pwd) 
          echo "CURRENT_PATH=$CURRENT_PATH" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          name: Caddy L4 CF ${{ env.VERSION }}
          body: |
            🚀 Build automatizado de Caddy con soporte para Layer 4 y Cloudflare
            
            Compilado en GitHub Actions con:
            - Go ${{ env.GO_VERSION }}
            - xcaddy ${{ env.XCADDYV }}
            

            Incluye:
            - AMD64 build
            - ARM64 build
            
            Version: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            ${{ env.CURRENT_PATH }}/caddy_amd64_v${{ env.VERSION }}.tar.gz
            ${{ env.CURRENT_PATH }}/caddy_amd64_v${{ env.VERSION }}.tar.gz.sha512
            ${{ env.CURRENT_PATH }}/caddy_arm64_v${{ env.VERSION }}.tar.gz
            ${{ env.CURRENT_PATH }}/caddy_arm64_v${{ env.VERSION }}.tar.gz.sha512