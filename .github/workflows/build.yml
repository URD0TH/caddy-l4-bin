name: Build Caddy

on:
  push:
     branches:
        main
     tags:
       - 'build*'

permissions:
  contents: write

env:
  GO_VERSION: '1.24.1'


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install curl
        run: |
          sudo apt install -y curl 

      - name: Verificar √∫ltima versi√≥n de Go
        run: |
          LATEST_GO_VERSION=$(curl -s https://go.dev/VERSION?m=text | head -n 1 | cut -c 3-)
          echo "LATEST_GO_VERSION=${LATEST_GO_VERSION}" >> $GITHUB_ENV
          if [ "${{ env.GO_VERSION }}" != "${LATEST_GO_VERSION}" ]; then
            echo "‚ö†Ô∏è Advertencia: La versi√≥n de Go (${{ env.GO_VERSION }}) no es la m√°s reciente (${LATEST_GO_VERSION})"
          else
            echo "‚úÖ Usando la √∫ltima versi√≥n de Go"
          fi

      - name: Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Create temp directory
        run:  mkdir -p ./temp/xcaddy
                  
      - name: Set Version
        run: echo "VERSION=$(date +'%Y%m%d%H%M')" >> $GITHUB_ENV

      - name: Download checksums file
        working-directory: ./temp/xcaddy
        run: |
          # Obtener la URL del √∫ltimo release
          RELEASE_DATA=$(curl -sL https://api.github.com/repos/caddyserver/xcaddy/releases/latest)
          if [ $? -ne 0 ]; then
            echo "Error al obtener datos del release"
            exit 1
          fi
          
          # Extraer URL del archivo checksums
          CHECKSUMS_URL=$(echo "$RELEASE_DATA" | grep -o 'https://.*checksums.txt' | head -n1)
          if [ -z "$CHECKSUMS_URL" ]; then
            echo "No se pudo encontrar la URL del archivo checksums"
            exit 1
          fi
          
          # Descargar archivo checksums
          echo "Descargando checksums desde: $CHECKSUMS_URL"
          HTTP_CODE=$(curl -sL -w "%{http_code}" -o checksums.txt "$CHECKSUMS_URL")
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Error al descargar checksums. C√≥digo HTTP: $HTTP_CODE"
            exit 1
          fi
          
          # Verificar que el archivo no est√© vac√≠o
          if [ ! -s checksums.txt ]; then
            echo "El archivo checksums est√° vac√≠o"
            exit 1
          fi
          
          echo "‚úÖ Archivo checksums descargado correctamente"

      - name: Download and verify AMD64 build
        working-directory: ./temp/xcaddy
        run: |
          # Descargar archivo AMD64
          URL=$(curl -s https://api.github.com/repos/caddyserver/xcaddy/releases/latest | grep "download_url.*caddy_.*_linux_amd64.tar.gz" | cut -d : -f 2,3 | tr -d \")
          XCADDYV=$(curl -s https://api.github.com/repos/caddyserver/xcaddy/releases/latest | grep '"name": "v' | cut -d'"' -f4 | sed 's/v//')
          echo "XCADDYV=$XCADDYV" >> $GITHUB_ENV
          FILENAME=$(echo "$AMD64_URL" | grep -o "caddy_.*_linux_amd64.tar.gz")
          curl -sL -o caddy_amd64.tar.gz "$URL"
          
          # Verificar checksum
          EXPECTED_CHECKSUM=$(grep "$FILENAME" checksums.txt | awk '{print $1}')
          ACTUAL_CHECKSUM=$(sha256sum caddy_amd64.tar.gz | awk '{print $1}')
          
          if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]; then
            echo "Error: Checksum verification failed"
            exit 1
          fi
          
          # Extraer archivo
          tar -xvf caddy_amd64.tar.gz

      - name: compilar xcaddy amd64 layer 4 y cloudflare
        working-directory: ./temp/xcaddy
        run: |
          #compilar xcaddy para amd64 layer 4 y cloudflare
          GOARCH=amd64 GOOS=linux ./xcaddy build --with github.com/caddy-dns/cloudflare --with github.com/mholt/caddy-l4 --output caddy_amd64_v${{ env.VERSION }}
          echo "Caddy compiled successfully"
          # Comprimir en tar.gz
          tar -czf caddy_amd64_v${{ env.VERSION }}.tar.gz caddy_amd64_v${{ env.VERSION }}
          
          # Verificar arquitectura
          file "caddy_amd64_v${{ env.VERSION }}.tar.gz"
   

      - name: compilar xcaddy arm64 layer 4 y cloudflare
        working-directory: ./temp/xcaddy
        run: |
          #compilar xcaddy para arm64 layer 4 y cloudflare
          GOARCH=arm64 GOOS=linux ./xcaddy build --with github.com/caddy-dns/cloudflare --with github.com/mholt/caddy-l4 --output caddy_arm64_v${{ env.VERSION }}
          echo "Caddy compiled successfully"
          # Comprimir en tar.gz
          tar -czf caddy_arm64_v${{ env.VERSION }}.tar.gz caddy_arm64_v${{ env.VERSION }}

          # Verificar arquitectura
          file "caddy_arm64_v${{ env.VERSION }}.tar.gz"

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          name: Caddy L4 CF ${{ env.VERSION }}
          body: |
            üöÄ Build automatizado de Caddy con soporte para Layer 4 y Cloudflare
            
            Compilado en GitHub Actions con:
            - Go ${{ env.GO_VERSION }} $([ "${{ env.GO_VERSION }}" != "${{ env.LATEST_GO_VERSION }}" ] && echo "‚ö†Ô∏è (√∫ltima: ${{ env.LATEST_GO_VERSION }} se verificara compatibilidad en la proxima versi√≥n)")
            - xcaddy ${{ env.XCADDYV }}
            

            Incluye:
            - AMD64 build
            - ARM64 build
            
            Version: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            caddy_amd64_v${{ env.VERSION }}.tar.gz
            caddy_arm64_v${{ env.VERSION }}.tar.gz